<project name="openspcoop2-compile-spcoop-testsuite-run">
    <description>
        Esecuzione dei test
    </description>

	
	<!-- estensione di ant (if .... ) -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
          <classpath>
              <pathelement location="${required_lib}/ant/ant-contrib-1.0b3.jar"/>
          </classpath>
	</taskdef>
	

	
	<!--  ************* RUN TESTSUITE FUNZIONALITA PdD **************** -->


	<!-- configurazione default -->
	<property name="testHaltOnFailure" value="true"/>
	<target name="run_testsuite_default" description="Esegue la testsuite con la configurazione di default" >

		<if>
			<equals arg1="${reinizializzaConfigurazione}" arg2="true" />
			<then>
				<!-- Preparazione Ambiente -->
				<antcall target="creazioneFileConfigurazioneDefault"/>
				<antcall target="preparazioneAmbienteCore"/>
			</then>
		</if>

		<!-- Chiamata per TestNG -->
		<echo message="Avvio testSuite OpenSPCoop (gruppo: ${group}) (haltOnFailure:${testHaltOnFailure})" />
		<testng classpathref="classpath_run"
            outputdir="${output}/default"
            listeners="org.openspcoop2.protocol.spcoop.testsuite.core.TestSuiteTransformer"
            haltonfailure="${testHaltOnFailure}" groups="${group}">
			<classfileset dir="${build_testunits}/NG_UNITS" includes="**/*.class"/>
		</testng>
		<if>
			<not>
				<equals arg1="${group}" arg2="RisorseEsterne"/>
			</not>
			<then>
				<echo message="Check risorse utilizzate (gruppo: RisorseEsterne)" />
				<testng classpathref="classpath_run"
		            outputdir="${output}/defaultRisorseUtilizzate"
		            listeners="org.openspcoop2.protocol.spcoop.testsuite.core.TestSuiteTransformer"
		            haltonfailure="${testHaltOnFailure}" groups="RisorseEsterne">
					<classfileset dir="${build_testunits}/NG_UNITS" includes="**/*.class"/>
				</testng>
			</then>
		</if>

		<if>
			<equals arg1="${reinizializzaConfigurazione}" arg2="true" />
			<then>
				<!-- Ripristino Ambiente -->
				<antcall target="ripristinoAmbiente"/>
			</then>
		</if>

	</target>

	<!-- configurazione connection new -->
	<target name="run_testsuite_connectionNew" description="Esegue la testsuite con la configurazione con connection new" >

		<if>
			<equals arg1="${reinizializzaConfigurazione}" arg2="true" />
			<then>
				<!-- Preparazione Ambiente -->
				<antcall target="creazioneFileConfigurazioneConnectionNew"/>
				<antcall target="preparazioneAmbienteCore"/>
			</then>
		</if>

		<!-- Chiamata per TestNG -->
		<!--
           <echo message="Avvio testSuite OpenSPCoop con la configurazione con connection new" />
           <testng classpathref="classpath_run"
               outputdir="${output}/connectionNew"
               listeners="org.openspcoop2.protocol.spcoop.testsuite.core.TestSuiteTransformer"
               haltonfailure="${testHaltOnFailure}">
               <classfileset dir="${build_testunits}/NG_UNITS" includes="**/*.class"/>
           </testng>
        -->
		<echo message="Avvio testSuite OpenSPCoop (gruppo: ${group})" />
		<testng classpathref="classpath_run"
             outputdir="${output}/connectionNew"
             listeners="org.openspcoop2.protocol.spcoop.testsuite.core.TestSuiteTransformer"
             haltonfailure="${testHaltOnFailure}" groups="${group}">
			<classfileset dir="${build_testunits}/NG_UNITS" includes="**/*.class"/>
		</testng>
		<if>
			<not>
				<equals arg1="${group}" arg2="RisorseEsterne"/>
			</not>
			<then>
				<echo message="Check risorse utilizzate (gruppo: RisorseEsterne)" />
				<testng classpathref="classpath_run"
		            outputdir="${output}/defaultRisorseUtilizzate"
		            listeners="org.openspcoop2.protocol.spcoop.testsuite.core.TestSuiteTransformer"
		            haltonfailure="${testHaltOnFailure}" groups="RisorseEsterne">
					<classfileset dir="${build_testunits}/NG_UNITS" includes="**/*.class"/>
				</testng>
			</then>
		</if>

		<if>
			<equals arg1="${reinizializzaConfigurazione}" arg2="true" />
			<then>
				<!-- Ripristino Ambiente -->
				<antcall target="ripristinoAmbiente"/>
			</then>
		</if>

	</target>


	<!-- run all testsuite -->
	<!-- <target name="run_testsuite_completa"
	        depends="init_compile_testunits,compile_testsuitelib_handler" description="Esegue la testsuite gruppo per gruppo" > -->
	<target name="run_testsuite_completa"  description="Esegue la testsuite gruppo per gruppo" >
	
	    <!-- Preparo ambiente -->
		<available file="risultati-testsuite-completa" property="existsDirResocontoTest"/>
		<if>
		  <equals arg1="${existsDirResocontoTest}" arg2="true"/>
		  <then>
		  		<fail message="Directory risultati-testsuite-completa gia' esistente, e contiene i risultati di una precedente batteria. Eliminarla prima di proseguire con dei nuovi tests."/>
		  </then>
		</if>

		<mkdir dir="risultati-testsuite-completa"/>
			
		<!-- TODO: impostare OpenSPCoop.ear Correttamente -->
		<available property="CheckOpenSPCoopDir" type="dir" file="${server_ear}"/>
		<if>
			<not>
				<istrue value="${CheckOpenSPCoopDir}"/>
			</not>
			<then>
				<fail message="Archivio installato nell'application server [${server_ear}] non esistente, o non scompattato come directory"/>
			</then>
		</if>
		<!-- logger.log4j.properties -->
		<replace file="${server_ear}/properties/logger.log4j.properties" 
				 token="log4j.category.openspcoop2.tracciamento" 
				 value="#log4j.category.openspcoop2.tracciamento"/>
		<replace file="${server_ear}/properties/logger.log4j.properties" 
				 token="log4j.category.openspcoop2.msgDiagnostico" 
				 value="#log4j.category.openspcoop2.msgDiagnostico"/>
		<replace file="${server_ear}/properties/logger.log4j.properties" 
				 token="log4j.category.openspcoop2.portaDiDominio" 
				 value="#log4j.category.openspcoop2.portaDiDominio"/>
		<replace file="${server_ear}/properties/logger.log4j.properties" 
				 token="log4j.category.openspcoop2.integrationManager" 
				 value="#log4j.category.openspcoop2.integrationManager"/>
		<replace file="${server_ear}/properties/logger.log4j.properties" 
				 token="log4j.category.openspcoop2.dump" 
				 value="#log4j.category.openspcoop2.dump"/>
		<replace file="${server_ear}/properties/logger.log4j.properties" 
				 token="log4j.category.openspcoop2.core" 
				 value="#log4j.category.openspcoop2.core"/>
    	<concat destfile="${server_ear}/properties/logger.log4j.properties" append="yes">   
# IMPOSTAZIONI - TESTSUITE #
log4j.category.openspcoop2.tracciamento=ALL,openspcoop2.tracciamento.file
log4j.category.openspcoop2.msgDiagnostico=ALL,openspcoop2.msgDiagnostico.file
log4j.category.openspcoop2.portaDiDominio=ALL,openspcoop2.portaDiDominio.file
log4j.category.openspcoop2.integrationManager=ALL,openspcoop2.integrationManager.file
log4j.category.openspcoop2.dump=ALL,openspcoop2.dump.file
log4j.category.openspcoop2.core=ALL,openspcoop2.core.file
    	</concat>
		<!-- openspcoop2.properties -->
		<replace file="${server_ear}/properties/openspcoop2.properties" 
				 token="org.openspcoop2.pdd.repository.tipoDatabase" 
				 value="#org.openspcoop2.pdd.repository.tipoDatabase"/>
		<replace file="${server_ear}/properties/openspcoop2.properties" 
				 token="org.openspcoop2.pdd.services.ricezioneContenutiApplicativi.soapAction.checkQuotedString" 
				 value="#org.openspcoop2.pdd.services.ricezioneContenutiApplicativi.soapAction.checkQuotedString"/>
		<replace file="${server_ear}/properties/openspcoop2.properties" 
				 token="org.openspcoop2.pdd.services.ricezioneBusteEGov.soapAction.checkQuotedString" 
				 value="#org.openspcoop2.pdd.services.ricezioneBusteEGov.soapAction.checkQuotedString"/>		
		<replace file="${server_ear}/properties/openspcoop2.properties" 
				 token="org.openspcoop2.pdd.autorizzazioneSPCoop.tipo" 
				 value="#org.openspcoop2.pdd.autorizzazioneSPCoop.tipo"/>		
		<replace file="${server_ear}/properties/openspcoop2.properties" 
				 token="org.openspcoop2.pdd.services.pd.gestoriCredenziali" 
				 value="#org.openspcoop2.pdd.services.pd.gestoriCredenziali"/>		
		<replace file="${server_ear}/properties/openspcoop2.properties" 
				 token="org.openspcoop2.pdd.services.pa.gestoriCredenziali" 
				 value="#org.openspcoop2.pdd.services.pa.gestoriCredenziali"/>	
		<replace file="${server_ear}/properties/openspcoop2.properties" 
				 token="org.openspcoop2.pdd.services.integrationManager.gestoriCredenziali" 
				 value="#org.openspcoop2.pdd.services.integrationManager.gestoriCredenziali"/>
    	<concat destfile="${server_ear}/properties/openspcoop2.properties" append="yes">   
# IMPOSTAZIONI - TESTSUITE #
org.openspcoop2.pdd.repository.tipoDatabase=@@TIPO_DATABASE@@
org.openspcoop2.pdd.autorizzazioneBuste.tipo=registro
org.openspcoop2.pdd.services.ricezioneContenutiApplicativi.soapAction.checkQuotedString=true
org.openspcoop2.pdd.services.ricezioneBusteEGov.soapAction.checkQuotedString=true
org.openspcoop2.pdd.services.pd.gestoriCredenziali=testOpenSPCoop
org.openspcoop2.pdd.services.pa.gestoriCredenziali=testOpenSPCoop
org.openspcoop2.pdd.services.integrationManager.gestoriCredenziali=testOpenSPCoop
    	</concat>
		<replace file="${server_ear}/properties/openspcoop2.properties" 
				 token="@@TIPO_DATABASE@@" 
				 value="${openspcoop2.tipoDatabase}"/>
		<!-- jar per handlers -->
		<copy file="${dist}/testsuite_handler.jar" todir="${server_ear}/lib"/>
		<!-- redeploy -->
		<!-- touch file="${server_ear}/META-INF/application.xml"/ -->
		<exec executable="service">
			<arg value="jbossas"/>
		        <arg value="restart"/>
		</exec>

		<echo message="Attendo 1 minuto in modo da dare tempo a OpenSPCoop di avviarsi correttamente ..."/>
		<sleep milliseconds="60000"/>
		
		<!-- tests -->
		<property name="testUnitsDir" location="src/org/openspcoop/testsuite/test/units/"/>
		<fileset dir="${testUnitsDir}" id="testsPathCompleto">
		        <include name="*.java"/>
		 		<exclude name="LogXML.java"/>
		 		<exclude name="GestioneConfigurazionePdD.java"/>
		 		<exclude name="GestioneGestoreEventi.java"/>
		 		<exclude name="GestioneRegistroServizi.java"/>
		 		<exclude name="CooperazioneSPCoopBase.java"/>
		</fileset>
		<pathconvert pathsep=" " property="testsEstensioneJava" refid="testsPathCompleto">
		         <map from="${testUnitsDir}/" to=""/>
		</pathconvert>
		<foreach target="run_testsuite_completa_test_singolo" param="test" list="${testsEstensioneJava}" delimiter=" "/>

		<!-- pulizia -->
		<delete file="server.log.tmp" deleteonexit="true" />
		<delete file="server.log.tmp.diff" deleteonexit="true" />
				
	</target>
	<target name="run_testsuite_completa_test_singolo">
		    <propertyregex property="nomeTest"
						              input="${test}"
						              regexp="(.*)\.java"
						              select="\1"
						              casesensitive="false" />
			<echo message="test: ${nomeTest} " />
				
			<!-- TODO: gestire LogXML -->
		
			<!-- Preparazione log test -->
			<mkdir dir="risultati-testsuite-completa/${nomeTest}"/>
			<copy file="${server_log}" tofile="server.log.tmp" overwrite="true" />
			<copy file="${openspcoop_log}/openspcoop2.log" tofile="openspcoop2.log.tmp" overwrite="true" />
			<copy file="${openspcoop_log}/openspcoop2_core.log" tofile="openspcoop2_core.log.tmp" overwrite="true" />
			<copy file="${openspcoop_log}/openspcoop2_integrationManager.log" tofile="openspcoop2_integrationManager.log.tmp" overwrite="true" />
			<copy file="${openspcoop_log}/openspcoop2_tracciamento.log" tofile="openspcoop2_tracciamento.log.tmp" overwrite="true" />
			<copy file="${openspcoop_log}/openspcoop2_msgDiagnostico.log" tofile="openspcoop2_msgDiagnostico.log.tmp" overwrite="true" />
			<copy file="${openspcoop_log}/openspcoop2_dump.log" tofile="openspcoop2_dump.log.tmp" overwrite="true" />
		
			<!-- Pulisco il database -->
			<sql
		    	driver="${openspcoop2.driverJDBCAccessoDatabase}"
		    	url="${openspcoop2.urlAccessoDatabase}"
		    	userid="${openspcoop2.username}"
		    	password="${openspcoop2.password}" 
				classpathref="classpath_run">
UPDATE messaggi SET proprietario ='GestoreMessaggi';
delete from repository_egov ;
delete from lista_eccezioni;
delete from lista_riscontri;
delete from lista_trasmissioni;
delete from asincrono;
delete from riscontri_da_ricevere;
delete from msg_servizi_applicativi;
delete from definizione_messaggi;
delete from sequenza_da_inviare;
delete from sequenza_da_ricevere;
			</sql>
			<sql
	    		driver="${diagnostica.driverJDBCAccessoDatabase}"
	    		url="${diagnostica.urlAccessoDatabase}"
	    		userid="${diagnostica.username}"
	    		password="${diagnostica.password}"
				classpathref="classpath_run">
delete from msgdiagnostici;
delete from msgdiag_correlazione_sa;
delete from msgdiag_correlazione;
delete from tracce_eccezioni;
delete from tracce_riscontri;
delete from tracce_trasmissioni;
delete from tracce;
			</sql>
		
			<!-- Esecuzione test -->
			<antcall target="run_testsuite" >
				 <param name="group" value="${nomeTest}"/>
				 <param name="testHaltOnFailure" value="false"/>
			</antcall>
				
			<!-- Raccolta log -->
		 	<copy todir="risultati-testsuite-completa/${nomeTest}/">
		    	<fileset dir="RisultatiTestSuite"/>
		  	</copy>
			<mkdir dir="risultati-testsuite-completa/${nomeTest}/openspcoop_log"/>
			<exec executable="diff" output="openspcoop2.log.tmp.diff">
				<arg value="${openspcoop_log}/openspcoop2.log"/>
				<arg value="openspcoop2.log.tmp"/>
			</exec>
			<copy tofile="risultati-testsuite-completa/${nomeTest}/openspcoop_log/openspcoop2.log" file="openspcoop2.log.tmp.diff" />
			<exec executable="diff" output="openspcoop2_core.log.tmp.diff">
				<arg value="${openspcoop_log}/openspcoop2_core.log"/>
				<arg value="openspcoop2_core.log.tmp"/>
			</exec>
			<copy tofile="risultati-testsuite-completa/${nomeTest}/openspcoop_log/openspcoop2_core.log" file="openspcoop2_core.log.tmp.diff" />
			<exec executable="diff" output="openspcoop2_integrationManager.log.tmp.diff">
				<arg value="${openspcoop_log}/openspcoop2_integrationManager.log"/>
				<arg value="openspcoop2_integrationManager.log.tmp"/>
			</exec>
			<copy tofile="risultati-testsuite-completa/${nomeTest}/openspcoop_log/openspcoop2_integrationManager.log" file="openspcoop2_integrationManager.log.tmp.diff" />
			<exec executable="diff" output="openspcoop2_tracciamento.log.tmp.diff">
				<arg value="${openspcoop_log}/openspcoop2_tracciamento.log"/>
				<arg value="openspcoop2_tracciamento.log.tmp"/>
			</exec>
			<copy tofile="risultati-testsuite-completa/${nomeTest}/openspcoop_log/openspcoop2_tracciamento.log" file="openspcoop2_tracciamento.log.tmp.diff" />
			<exec executable="diff" output="openspcoop2_msgDiagnostico.log.tmp.diff">
				<arg value="${openspcoop_log}/openspcoop2_msgDiagnostico.log"/>
				<arg value="openspcoop2_msgDiagnostico.log.tmp"/>
			</exec>
			<copy tofile="risultati-testsuite-completa/${nomeTest}/openspcoop_log/openspcoop2_msgDiagnostico.log" file="openspcoop2_msgDiagnostico.log.tmp.diff" />
			<exec executable="diff" output="openspcoop2_dump.log.tmp.diff">
				<arg value="${openspcoop_log}/openspcoop2_dump.log"/>
				<arg value="openspcoop2_dump.log.tmp"/>
			</exec>
			<copy tofile="risultati-testsuite-completa/${nomeTest}/openspcoop_log/openspcoop2_dump.log" file="openspcoop2_dump.log.tmp.diff" />
			<mkdir dir="risultati-testsuite-completa/${nomeTest}/application_server_log"/>
			<exec executable="diff" output="server.log.tmp.diff">
				<arg value="${server_log}"/>
				<arg value="server.log.tmp"/>
			</exec>
			<copy tofile="risultati-testsuite-completa/${nomeTest}/application_server_log/server.log" file="server.log.tmp.diff" />

			<!-- Resoconto TestSuite -->
			<xmlproperty file="risultati-testsuite-completa/${nomeTest}/default/Ant suite/Ant test.xml" collapseAttributes="true"/>
			<var name="STATO" value="OK"/>
			<if>
				<not>
					<equals arg1="${testsuite.failures}" arg2="0"/>
				</not>
				<then>
					<var name="STATO" value="ERROR"/>
				</then>
			</if>
			<var name="DettaglioErrore" value=""/>
			<if>
				<not>
					<equals arg1="${testsuite.testcase.failure.message}" arg2="${testsuite.testcase.failure.message}"/>
				</not>
				<then>
					<var name="DettaglioErrore" value="Eventuale messaggio di errore: ${testsuite.testcase.failure.message}"/>
				</then>
			</if>
        	<concat destfile="risultati-testsuite-completa/Resoconto.txt" append="yes">
*******************************************************************************************************************                     
Tests del gruppo: ${nomeTest} - ${STATO}
Test eseguiti: ${testsuite.tests}
Test falliti: ${testsuite.failures}  
${DettaglioErrore}      		
*******************************************************************************************************************     
                
        	</concat>

		
	</target>
	
</project>
