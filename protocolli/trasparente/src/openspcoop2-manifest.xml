<?xml version="1.0" encoding="UTF-8"?>
<openspcoop2 xmlns="http://www.openspcoop2.org/protocol/manifest">

    <protocol name="trasparente" label="API Gateway"
    	descrizione="Gestisce le comunicazioni in entrata ed in uscita dal dominio, adattandosi alla modalitÃ  di trasmissione prevista dallo specifico servizio (SOAP o REST)"
    	webSite="http://www.openspcoop.org">
    	<factory>org.openspcoop2.protocol.trasparente.TrasparenteFactory</factory>
    </protocol>
    


    <binding default="rest">
    	<soap soap11="true" soap11_withAttachments="true" soap11_mtom="true"
    		  soap12="true" soap12_withAttachments="true" soap12_mtom="true">
    		<integration>
    		 	<implementation>
    		 		<name>
    		 			<param actor="providerType" suffix="_"/>
    		 			<param actor="providerName" suffix="/"/>
    		 			<param actor="serviceType" suffix="_"/>
    		 			<param actor="serviceName" suffix="/"/>
    		 			<param actor="serviceVersion"/>
    		 		</name>
					<resourceIdentification>
	    		 		<identificationModes default="url" forceInterfaceMode="true">
	    		 			<mode name="interface" />
		    		 		<mode name="header" />
		    		 		<mode name="url" />
		    		 		<mode name="content" />
		    		 		<mode name="input" />
		    		 		<mode name="soapAction" />
	    		 		</identificationModes>
	    		 		<identificationParameter>
		    		 		<param prefix=".*/(?:" actor="providerType" suffix="_)?"/>
	    		 			<param actor="providerName" suffix="/"/>
	    		 			<param prefix="(?:" actor="serviceType" suffix="_)?"/>
	    		 			<param actor="serviceName" suffix="/"/>
	    		 			<param actor="serviceVersion" suffix="/([^/|^?]*).*"/>
	    		 		</identificationParameter>
						<specificResource>
							<name>
	    		 				<param prefix="__" actor="name" suffix="__"/>
	    		 				<param actor="ruleName" />
	    		 			</name>
	    		 		</specificResource>
	    		 	</resourceIdentification>
	    		 </implementation>
	    		 <subscription>
    		 		<name>
    		 			<param actor="subscriberType" suffix="_"/>
    		 			<param actor="subscriberName" suffix="/"/>
    		 			<param actor="providerType" suffix="_"/>
    		 			<param actor="providerName" suffix="/"/>
    		 			<param actor="serviceType" suffix="_"/>
    		 			<param actor="serviceName" suffix="/"/>
    		 			<param actor="serviceVersion"/>
    		 		</name>
					<resourceIdentification>
	    		 		<identificationModes default="url" forceInterfaceMode="true">
	    		 			<mode name="interface" />
		    		 		<mode name="header" />
		    		 		<mode name="url" />
		    		 		<mode name="content" />
		    		 		<mode name="input" />
		    		 		<mode name="soapAction" />
	    		 		</identificationModes>
	    		 		<identificationParameter>
	    		 			<param prefix=".*/(?:" actor="subscriberType" suffix="_)?"/>
	    		 			<param actor="subscriberName" suffix="/"/>
	    		 			<param prefix="(?:" actor="providerType" suffix="_)?"/>
	    		 			<param actor="providerName" suffix="/"/>
	    		 			<param prefix="(?:" actor="serviceType" suffix="_)?"/>
	    		 			<param actor="serviceName" suffix="/"/>
	    		 			<param actor="serviceVersion" suffix="/([^/|^?]*).*"/>
	    		 		</identificationParameter>
						<specificResource>
							<name>
	    		 				<param prefix="__" actor="name" suffix="__"/>
	    		 				<param actor="ruleName" />
	    		 			</name>
	    		 		</specificResource>
	    		 	</resourceIdentification>
	    		 </subscription>
    		</integration>
    		<integrationError>
    			<internal problemType="rfc7807">
    				<rfc7807 details="true" govwayStatus="true" instance="false" useAcceptHeader="true"/>
	    			<authentication httpReturnCode="500" messageType="soapAsRequest" />
	    			<authorization httpReturnCode="500" messageType="soapAsRequest" />
	    			<notFound httpReturnCode="500" messageType="soapAsRequest" />
	    			<badRequest httpReturnCode="500" messageType="soapAsRequest" />
	    			<tooManyRequests httpReturnCode="500" messageType="soapAsRequest" />
	    			<internalError httpReturnCode="500" messageType="soapAsRequest" />
	    			<serviceUnavailable httpReturnCode="500" messageType="soapAsRequest" />
	    			<default httpReturnCode="500" messageType="none" /> <!-- se non sono riuscito a capire la versione soap, ritorno 500 senza alcun fault -->
    			</internal>	
    			<external problemType="rfc7807" useInternalFault="true">
    				<rfc7807 details="true" govwayStatus="true" instance="false" useAcceptHeader="true"/>
	    			<authentication httpReturnCode="500" messageType="soapAsRequest" />
	    			<authorization httpReturnCode="500" messageType="soapAsRequest" />
	    			<notFound httpReturnCode="500" messageType="soapAsRequest" />
	    			<badRequest httpReturnCode="500" messageType="soapAsRequest" />
	    			<tooManyRequests httpReturnCode="500" messageType="soapAsRequest" />
	    			<internalError httpReturnCode="500" messageType="soapAsRequest" />
	    			<serviceUnavailable httpReturnCode="500" messageType="soapAsRequest" />
	    			<default httpReturnCode="500" messageType="none" /> <!-- se non sono riuscito a capire la versione soap, ritorno 500 senza alcun fault -->
    			</external>	
    		</integrationError>
    		<mediaTypeCollection>
    			<mediaType messageType="soap11">text/xml</mediaType>
    			<default messageType="soap12"/>
    		</mediaTypeCollection>
    		<interfaces>
    			<specification type="wsdl11" />
    		</interfaces>
    		<functionality conversationIdentifier="true" referenceToRequestIdentifier="true"/>
    	</soap>
    	<rest xml="true" json="true" 
    		  binary="true" mimeMultipart="true">
    		  <integration>
    		 	<implementation>
    		 		<name>
    		 			<param actor="providerType" suffix="_"/>
    		 			<param actor="providerName" suffix="/"/>
    		 			<param actor="serviceType" suffix="_"/>
    		 			<param actor="serviceName" suffix="/"/>
    		 			<param actor="serviceVersion"/>
    		 		</name>
					<resourceIdentification>
	    		 		<identificationModes default="interface" forceInterfaceMode="true">
	    		 			<mode name="interface" />
		    		 		<mode name="header" onlyAdvancedMode="true" />
		    		 		<mode name="content" onlyAdvancedMode="true" />
		    		 		<mode name="input" onlyAdvancedMode="true" />
	    		 		</identificationModes>
						<specificResource>
							<name>
	    		 				<param prefix="__" actor="name" suffix="__"/>
	    		 				<param actor="ruleName" />
	    		 			</name>
	    		 		</specificResource>
	    		 	</resourceIdentification>
	    		 </implementation>
	    		 <subscription>
    		 		<name>
    		 			<param actor="subscriberType" suffix="_"/>
    		 			<param actor="subscriberName" suffix="/"/>
    		 			<param actor="providerType" suffix="_"/>
    		 			<param actor="providerName" suffix="/"/>
    		 			<param actor="serviceType" suffix="_"/>
    		 			<param actor="serviceName" suffix="/"/>
    		 			<param actor="serviceVersion"/>
    		 		</name>
					<resourceIdentification>
	    		 		<identificationModes default="interface" forceInterfaceMode="true">
	    		 			<mode name="interface" />
		    		 		<mode name="header" onlyAdvancedMode="true" />
		    		 		<mode name="content" onlyAdvancedMode="true" />
		    		 		<mode name="input" onlyAdvancedMode="true" />
	    		 		</identificationModes>
						<specificResource>
							<name>
	    		 				<param prefix="__" actor="name" suffix="__"/>
	    		 				<param actor="ruleName" />
	    		 			</name>
	    		 		</specificResource>
	    		 	</resourceIdentification>
	    		 </subscription>
    		</integration>
    		<integrationError>
    			<internal problemType="rfc7807">
    				<rfc7807 details="true" govwayStatus="true" instance="false" useAcceptHeader="true"/>
	    			<authentication httpReturnCode="401" messageType="sameAsRequest" />
	    			<authorization httpReturnCode="403" messageType="sameAsRequest" />
	    			<notFound httpReturnCode="404" messageType="sameAsRequest" />
	    			<badRequest httpReturnCode="400" messageType="sameAsRequest" />
	    			<tooManyRequests httpReturnCode="429" messageType="sameAsRequest" />
	    			<internalError httpReturnCode="500" messageType="sameAsRequest" />
	    			<serviceUnavailable httpReturnCode="503" messageType="sameAsRequest" />
	    			<default httpReturnCode="500" messageType="json" />
    			</internal>
    			<external problemType="rfc7807">
    				<rfc7807 details="true" govwayStatus="true" instance="false" useAcceptHeader="true"/>
	    			<authentication httpReturnCode="401" messageType="sameAsRequest" />
	    			<authorization httpReturnCode="403" messageType="sameAsRequest" />
	    			<notFound httpReturnCode="404" messageType="sameAsRequest" />
	    			<badRequest httpReturnCode="400" messageType="sameAsRequest" />
	    			<tooManyRequests httpReturnCode="429" messageType="sameAsRequest" />
	    			<internalError httpReturnCode="500" messageType="sameAsRequest" />
	    			<serviceUnavailable httpReturnCode="503" messageType="sameAsRequest" />
	    			<default httpReturnCode="500" messageType="json" />
    			</external>
    		</integrationError>
    		<mediaTypeCollection>
    			<mediaType messageType="xml">text/xml</mediaType>
    			<mediaType messageType="xml">application/xml</mediaType>
    			<mediaType messageType="xml" regExpr="true">.*\+xml</mediaType>
    			<mediaType messageType="json">text/json</mediaType>
				<mediaType messageType="json">text/x-json</mediaType>
    			<mediaType messageType="json">application/json</mediaType>
    			<mediaType messageType="json">application/x-json</mediaType>
    			<mediaType messageType="json" regExpr="true">.*\+json</mediaType>
    			<mediaType messageType="mimeMultipart" regExpr="true">multipart\/related*</mediaType>
    			<!-- rfc1341: mixed|alternative|digest|parallel -->
    			<mediaType messageType="mimeMultipart" regExpr="true">multipart\/(related|mixed|alternative|digest|parallel)+</mediaType>
    			<!-- rfc2616: byteranges -->
    			<mediaType messageType="mimeMultipart" regExpr="true">multipart\/byteranges*</mediaType>
    			<!-- rfc1847: encrypted|signed -->
    			<mediaType messageType="mimeMultipart" regExpr="true">multipart\/(encrypted|signed)+</mediaType>
    			<default messageType="binary"/>
    			<undefined messageType="binary"/>
    		</mediaTypeCollection>
    		<interfaces>
    			<specification type="wadl" />
    			<specification type="swagger2" />
    			<specification type="openApi3" />
    		</interfaces>
    		<functionality conversationIdentifier="true" referenceToRequestIdentifier="true"/>
    	</rest>
    </binding>

    <web>
    
		<!-- Contesto proxy supporta sia soap che rest 
		     con il mapping definito a livello generare di binding -->
	    <context name="api"/>
	    <emptyContext enabled="true"/>
	
		<!-- Contesto soap supporta solamente il service binding soap 
	 	     (Controllo Runtime) -->
	    <!-- 
	    	<context name="soap" binding="soap"/>
	    -->
	
		<!-- Contesto soap11 supporta solamente il service binding soap 
		     (Controllo Runtime) e forza la conversione del content type
			in message type soap11 qualsiasi sia il content type presente -->
	    <!-- 
	    <context name="soap11" binding="soap">
	        	<soapMediaTypeCollection>
	    			<default messageType="soap11"/>
	    		</soapMediaTypeCollection>
	    </context>
	    -->
	
		<!-- Contesto soap12 supporta solamente il service binding soap 
		     (Controllo Runtime) e forza la conversione del content type
			in message type soap12 qualsiasi sia il content type presente -->
	    <!-- 
	    <context name="soap12" binding="soap">
	        	<soapMediaTypeCollection>
	    			<default messageType="soap12"/>
	    		</soapMediaTypeCollection>
	    </context>
	    -->
	
		<!-- Contesto rest supporta solamente il service binding rest
	 	     (Controllo Runtime) -->
	    <!-- 
	    <context name="rest" binding="rest"/>
	    -->
	 		
		<!-- Contesto binary supporta solamente il service binding rest
		     (Controllo Runtime) e forza la conversione del content type
			in message type binary qualsiasi sia il content type presente -->
		<!-- 
	    <context name="binary" binding="rest">
	 			<restMediaTypeCollection>
	 				<default messageType="binary"/>
	 				<undefined messageType="binary"/>
	 			</restMediaTypeCollection>
	 	</context>
	    -->

    </web>

    <registry>

        <organization>
            <types>
            	<type name="gw"/>
            </types>
        </organization>

        <service trace="false">
            <types>
            
                <!-- Il tipo proxy supporta sia soap che rest 
		     		con il mapping definito a livello generare di binding -->
                <type name="gw" />
            
            	<!-- Il tipo SOAP Ã¨ compatibile solamente 
			   		 con il service binding soap -->
			    <!-- 
                <type name="soap" binding="soap"/>
                -->
                
                <!-- Il tipo SOAP11 Ã¨ compatibile solamente 
			   		 con il service binding soap e forza la conversione del content type
					in message type soap11 qualsiasi sia il content type presente -->
                <!-- 
                <type name="soap11" binding="soap">
	                <soapMediaTypeCollection>
		    			<default messageType="soap11"/>
		    		</soapMediaTypeCollection>
                </type>
                -->
                
                <!-- Il tipo SOAP12 Ã¨ compatibile solamente 
			   		 con il service binding soap e forza la conversione del content type
					in message type soap12 qualsiasi sia il content type presente -->
                <!-- 
                <type name="soap12" binding="soap">
	                <soapMediaTypeCollection>
		    			<default messageType="soap12"/>
		    		</soapMediaTypeCollection>
                </type>
                -->
                
                <!-- Il tipo REST Ã¨ compatibile solamente 
			   		 con il service binding rest -->
                <!-- 
                <type name="rest" binding="rest"/>
                -->
                
                <!-- Il tipo XML Ã¨ compatibile solamente 
			   		con il service binding rest e forza la conversione del content type
					in message type xml qualsiasi sia il content type presente -->
                <!-- 
                <type name="xml" binding="rest">
                	<restMediaTypeCollection>
 						<default messageType="xml"/>
 						<undefined messageType="xml"/>
 					</restMediaTypeCollection>
                </type>
                -->
                
                <!-- Il tipo JSON Ã¨ compatibile solamente 
			   		con il service binding rest e forza la conversione del content type
					in message type json qualsiasi sia il content type presente -->
                <!-- 
                <type name="json" binding="rest">
                	<restMediaTypeCollection>
 						<default messageType="json"/>
 						<undefined messageType="json"/>
 					</restMediaTypeCollection>
                </type>
                -->
                
                <!-- Il tipo BINARY Ã¨ compatibile solamente 
			   		con il service binding rest e forza la conversione del content type
					in message type binary qualsiasi sia il content type presente -->
				<!-- 
                <type name="binary" binding="rest">
                	<restMediaTypeCollection>
 						<default messageType="binary"/>
 						<undefined messageType="binary"/>
 					</restMediaTypeCollection>
                </type>
                -->
                
                <!-- Il tipo BINARY Ã¨ compatibile solamente 
			   		con il service binding rest e forza la conversione del content type
					in message type mimeMultipart qualsiasi sia il content type presente -->
				<!-- 
                <type name="mutipart" binding="rest">
                	<restMediaTypeCollection>
 						<default messageType="mimeMultipart"/>
 						<undefined messageType="mimeMultipart"/>
 					</restMediaTypeCollection>
                </type>
                -->
            </types>
        </service>

        <versions>
        	<version name="1.0"/>
        </versions>

    </registry>

    <urlMapping type="PROPERTIES">
        <file>/trasparente-url-mapping.properties</file>
    </urlMapping>

</openspcoop2>
