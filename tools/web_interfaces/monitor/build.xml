<?xml version="1.0" encoding="iso-8859-1"?>

<project name="WebInterfacePddMonitor" basedir=".">
	<description>
        File di Script per la compilazione dell'interfaccia PddMonitor
    </description>

	<import file="./local_env.xml" />
	<import file="./ant/openspcoop2-pddMonitor_core-build.xml" />
	<import file="./ant/openspcoop2-pddMonitor_transazioni-build.xml" />
	<import file="./ant/openspcoop2-pddMonitor_statistiche-build.xml" />
	<import file="./ant/openspcoop2-pddMonitor_eventi-build.xml" />
	<import file="./ant/openspcoop2-pddMonitor-war.xml" />
	<import file="./ant/openspcoop2-pddMonitor-codeGen.xml" />
	<import file="${mvc}/build.xml" />
	<import file="${users}/build.xml" />
	<import file="${audit}/build.xml" />
	<import file="${openspcoop2}/ant/commons/as-check.xml" />
	
	<!-- directory root -->
	<property name="svn_rootDir" location="${openspcoop2}" />
	
	<!-- set properties for this build -->
	<property name="pddMonitor" location="${basedir}" />
	<property name="src_pddMonitor" value="${pddMonitor}/src" />
	<property name="src_webinf_pddMonitor" value="${src_pddMonitor}/WEB-INF" />
	<property name="src_core_pddMonitor" value="${src_pddMonitor}/src_core" />
	<property name="src_stat_pddMonitor" value="${src_pddMonitor}/src_stat" />
	<property name="src_transazioni_pddMonitor" value="${src_pddMonitor}/src_transazioni" />
	<property name="src_eventi_pddMonitor" value="${src_pddMonitor}/src_eventi" />
	<property name="build_pddMonitor" location="build/pddMonitor" />
	<property name="build_pddMonitor_war" location="build/pddMonitorWar" />
	<property name="dist_pddMonitor" location="dist" />
	<property name="doc_pddMonitor" location="doc" />
	<property name="plugins_pddMonitor" value="${pddMonitor}/deploy/plugins/config" />
	<property name="plugins_pddMonitor_pages" value="${pddMonitor}/deploy/plugins/pages" /> <!-- xhtml e tutto il resto del materiale che deve finire dentro l'archivio -->
	<property name="properties_pddMonitor" value="${pddMonitor}/deploy/properties" />
	<property name="deploy_pddMonitor" value="${pddMonitor}/deploy" />
	<property name="commons_temaConsole" value="${deploy_pddMonitor}/tema_css" />

	<!-- Indicazione se produrre la versione per server non j2ee -->
	<var name="j2ee" value="true" />
	
	<!-- Check AS Version -->
	<if>
		<not>
			<istrue value="${_asVersionVerified}"/>
		</not>
		<then>
			<runtarget target="check_as_version" />
			<var name="_asVersionVerified" value="true"/>
		</then>
	</if>
	<if>
		<matches string="${as}" pattern="tomcat.*"/>
		<then>
			<!-- Indicazione se produrre la versione senza j2ee object: mdb e timer ejb -->
			<var name="j2ee" value="false"/>
		</then>
	</if>
	
	<!-- Jar dipendenti dall'A.S. -->
	<var name="xerces_jar" value=""/>
	<var name="xml_apis_jar" value=""/>
	<var name="xalan_jar" value="" />
	<var name="xalan_serializer_jar" value="" />
	<var name="commons_logging_jar" value="" />
	<var name="javax_jms_jar" value="" />
	<var name="jaxp_ri_jar" value=""/>
	<var name="jboss_classloading" value="" />
	<var name="jboss_scanning" value="" />
	<var name="jboss_deployment_structure" value="" />

	<!-- commons_logging -->
	<if>
		<or>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
			<matches string="${as}" pattern="tomcat.*"/>
		</or>
		<then>
			<var name="commons_logging_jar" value="commons-logging-1.2.jar" />
		</then>
	</if>
	<!-- javax_jms -->
	<if>
		<or>
			<matches string="${as}" pattern="tomcat.*"/>
		</or>
		<then>
			<var name="javax_jms_jar" value="javax.jms.jar" />
		</then>
	</if>
	<!-- xalan -->
	<if>
		<or>
			<matches string="${as}" pattern="tomcat.*"/>
			<equals arg1="${as}" arg2="jboss4"/>
			<equals arg1="${as}" arg2="jboss6"/>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="xalan_jar" value="xalan-2.7.1.jar" />
			<var name="xalan_serializer_jar" value="xalan-2.7.1_serializer.jar" />
		</then>
	</if>
	<!-- xerces -->
	<if>
		<or>
			<matches string="${as}" pattern="tomcat.*"/>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="xerces_jar" value="xercesImpl-2.11.0.jar"/>
			<var name="xml_apis_jar" value="xml-apis-2.11.0.jar"/>
		</then>
	</if>
	<!-- jaxp_ri -->
	<if>
		<or>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="jaxp_ri_jar" value="jaxp-ri-1.4.5.jar"/>
		</then>
	</if>
	<!-- neethi -->
	<var name="neethi_jar" value="" />
	<if>
		<or>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="neethi_jar" value="neethi-3.0.3.jar"/>
		</then>
	</if>
	<!-- geronimo_jaxws_spec -->
	<var name="geronimo_jaxws_spec_jar" value="" />
	<if>
		<or>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="geronimo_jaxws_spec_jar" value="DADEFINIREMEGLIOgeronimo-jaxws_2.2_spec-1.1.jar"/>
		</then>
	</if>
	<!-- jboss_classloading -->
	<if>
		<or>
			<equals arg1="${as}" arg2="jboss6"/>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="jboss_classloading" value="jboss-classloading.xml" />
		</then>
	</if>
	<!-- jboss_scanning -->
	<if>
		<or>
			<equals arg1="${as}" arg2="jboss6"/>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="jboss_scanning" value="jboss-scanning.xml" />
		</then>
	</if>
	<!-- jboss_deployment_structure -->
	<if>
		<or>
			<equals arg1="${as}" arg2="jboss7"/>
			<matches string="${as}" pattern="wildfly.*"/>
		</or>
		<then>
			<var name="jboss_deployment_structure" value="jboss-deployment-structure.xml" />
		</then>
	</if>
	
	
	
	<!-- Indicazione se produrre la versione singlePdD -->
	<var name="singlePdD" value="false" />
	<!-- Indicazione se produrre la versione singlePdD con registroServizi locale -->
	<var name="singlePdD.registroServizi.locale" value="true" />

	<!-- Directory per librerie -->
	<property name="lib" location="${deploy_pddMonitor}/lib" />
	<property name="jsp" location="${deploy_pddMonitor}/jsp" />
	<property name="images" location="${deploy_pddMonitor}/images" />

	
	<!-- estensione di ant (if .... ) -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${required_lib}/ant/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!-- CLASSPATH -->
	<path id="classpath_compile" >
		<fileset dir="${required_lib}" >
			<exclude name="**/axis14/*"/>
			<exclude name="**/*README"/>
			<exclude name="openspcoop2.userlibraries"/>
		</fileset>
	</path>
	<path id="classpath_dist" >
		<fileset dir="${openspcoop2_jars}" >
			<include name="*.jar"/>
		</fileset>
	</path>	
	
	<!-- Ripulisce la distribuzione -->
	<target name="clean_pddMonitor">
		<delete dir="${build_pddMonitor}" />
		<delete dir="${build_pddMonitor_war}" />
		<delete dir="build" />
		<delete dir="${dist_pddMonitor}" />
		<delete dir="${doc_pddMonitor}" />
	</target>

	<!-- Create the build directory structure used by compile -->
	<target name="init_compile_pddMonitor">
		<mkdir dir="${build_pddMonitor}" />
		<mkdir dir="${build_pddMonitor}/tmp" />
		<mkdir dir="${build_pddMonitor}/tmp_css" />
		<mkdir dir="${build_pddMonitor_war}" />
		<mkdir dir="${dist_pddMonitor}" />
	</target>
	
	

	<!-- Creazione Plugins di ControlStation -->
	<target name="plugins" description="Crea l'elenco dei jar/properties installati come plugins della pddMonitor">
		<!-- jar -->
		<fileset dir="${plugins_pddMonitor}" id="plugins.jar">
			<include name="**/*.jar" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath" refid="plugins.jar">
			<map from="${plugins_pddMonitor}/" to="lib/" />
		</pathconvert>
		<pathconvert pathsep=" " property="plugins.classpath.jar" refid="plugins.jar">
			<map from="${plugins_pddMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins-jar della PddMonitor: ${plugins.classpath.jar}" />

		<!-- properties -->
		<fileset dir="${plugins_pddMonitor}" id="plugins.properties">
			<include name="**/*.properties" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.properties" refid="plugins.properties">
			<map from="${plugins_pddMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins-properties della PdDMonitor: ${plugins.classpath.properties}" />

		<!-- WEB-INF/<nome>.web.xml.params -->
		<fileset dir="${plugins_pddMonitor}" id="plugins.web.xml.params">
			<include name="**/*.web.xml.params" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.web.xml.params" refid="plugins.web.xml.params">
			<map from="${plugins_pddMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins WEB-INF/web.xml (params) della PdDMonitor: ${plugins.classpath.web.xml.params}" />

		<!-- WEB-INF/<nome>.web.xml.filters -->
		<fileset dir="${plugins_pddMonitor}" id="plugins.web.xml.filters">
			<include name="**/*.web.xml.filters" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.web.xml.filters" refid="plugins.web.xml.filters">
			<map from="${plugins_pddMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins WEB-INF/web.xml (filters) della PdDMonitor: ${plugins.classpath.web.xml.filters}" />

		<!-- WEB-INF/<nome>.web.xml.listeners -->
		<fileset dir="${plugins_pddMonitor}" id="plugins.web.xml.listeners">
			<include name="**/*.web.xml.listeners" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.web.xml.listeners" refid="plugins.web.xml.listeners">
			<map from="${plugins_pddMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins WEB-INF/web.xml (listeners) della PdDMonitor: ${plugins.classpath.web.xml.listeners}" />

		<!-- WEB-INF/<nome>.web.xml.servlet -->
		<fileset dir="${plugins_pddMonitor}" id="plugins.web.xml.servlet">
			<include name="**/*.web.xml.servlet" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.web.xml.servlet" refid="plugins.web.xml.servlet">
			<map from="${plugins_pddMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins WEB-INF/web.xml (servlet) della PdDMonitor: ${plugins.classpath.web.xml.servlet}" />

		<!-- WEB-INF/<nome>.web.xml.servlet.mapping -->
		<fileset dir="${plugins_pddMonitor}" id="plugins.web.xml.servlet.mapping">
			<include name="**/*.web.xml.servlet.mapping" />
		</fileset>
		<pathconvert pathsep=" " property="plugins.classpath.web.xml.servlet.mapping" refid="plugins.web.xml.servlet.mapping">
			<map from="${plugins_pddMonitor}/" to="" />
		</pathconvert>
		<echo message="Plugins WEB-INF/web.xml (servlet.mapping) della PdDMonitor: ${plugins.classpath.web.xml.servlet.mapping}" />
	</target>

	
	
	<!-- Compilazioni dipendenze -->
	<target name="compile_dipendenze">
		<if>
			<istrue value="${buildPddMonitor}"/>
			<then>
				<runtarget target="compile_dipendenze_invoke" />
			</then>
		</if>
	</target>
	<target name="compile_dipendenze_invoke" depends="compile_users,compile_audit" description="compila le dipendenze" />

	<!-- Compilazione della PddMonitor-->
	<target name="compile_pddMonitor" depends="init_compile_pddMonitor,compile_dipendenze,compile_openspcoop2_pddMonitor_core,compile_openspcoop2_pddMonitor_transazioni,compile_openspcoop2_pddMonitor_statistiche,compile_openspcoop2_pddMonitor_eventi" description="compila pddMonitor"/>


	<!-- Creazione del modulo .WAR -->
	<target name="build_pddMonitor" depends="plugins,compile_dipendenze,compile_pddMonitor,war_openspcoop2_pddMonitor" description="Crea la struttura del modulo WAR" />

	
	<!-- alias -->
	<target name="build" depends="build_pddMonitor"/>
	<target name="clean" depends="clean_pddMonitor"/>




</project>
